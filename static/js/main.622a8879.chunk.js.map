{"version":3,"sources":["images/match.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","playerCount","setPlayerCount","computerCount","setComputerCount","isPlayerTurn","setPlayerTurn","isStarted","setisStarted","whoWon","setWhoWon","countRef","useRef","current","useEffect","playerTurn","event","innerText","target","setTimeout","randomNumber","Math","floor","random","prevState","console","log","className","onClick","src","match","alt","style","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAAe,G,MAAA,IAA0B,mC,OCI5BA,EAAM,WAAO,IAAD,EAEGC,mBAAS,IAFZ,mBAEhBC,EAFgB,KAETC,EAFS,OAGeF,mBAAS,GAHxB,mBAGhBG,EAHgB,KAGHC,EAHG,OAImBJ,mBAAS,GAJ5B,mBAIhBK,EAJgB,KAIDC,EAJC,OAKeN,oBAAS,GALxB,mBAKhBO,EALgB,KAKFC,EALE,OAMWR,oBAAS,GANpB,mBAMhBS,EANgB,KAMLC,EANK,OAOKV,mBAAS,MAPd,mBAOhBW,EAPgB,KAORC,EAPQ,KAQjBC,EAAWC,mBACjBD,EAASE,QAAUd,EAEnBe,qBAAU,WACM,IAAVf,GAEAW,EADET,EAAc,IAAM,EACZ,OAEA,cAGb,CAACF,IAEJ,IAmCMgB,EAAa,SAACC,GAAW,IACtBC,EAAaD,EAAME,OAAnBD,UACO,IAAVlB,IAAgBM,GAAgBN,GAASkB,EAAY,IACrDlB,GAASkB,IAAc,GACzBjB,EAASD,GAASkB,GAClBf,EAAeD,IAAegB,GAC9BX,GAAc,GA5BhBa,YAAW,WACT,IAAIC,EAEFA,EADuB,IAArBT,EAASE,QACI,EACe,IAArBF,EAASE,SACFV,EAAgB,GAAK,IAAM,EAAI,EAAI,EAC1CQ,EAASE,QAAU,GACZV,EAAgB,GAAK,IAAM,EAAI,EAAI,EAEpCkB,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAEjDvB,GAAS,SAAAwB,GACP,OAAOA,EAAYJ,KAErBhB,GAAiB,SAAAoB,GACf,OAAOA,EAAYJ,KAErBd,GAAc,GACdmB,QAAQC,IAAIN,KACX,OAYDpB,EAASD,GAASkB,GAClBf,EAAeD,IAAegB,GAC9BX,GAAc,MAIlB,OACI,qCACE,qBAAKqB,UAAU,aACf,sBAAKA,UAAU,QAAf,UACIpB,EAII,GAHA,qBAAKoB,UAAU,kBAAf,SACE,wBAAQA,UAAU,eAAeC,QAxD/B,WAChBpB,GAAa,IAuDC,qBAIPD,EACK,qCACE,wBAAQoB,UAAU,eAAeC,QA1D/B,WAChB5B,EAAS,IACTU,EAAU,MACVR,EAAe,GACfE,EAAiB,GACjBE,GAAc,IAqDA,mBACA,sBAAKqB,UAAU,kBAAf,UAAkC,mBAAoBxB,KACtD,sBAAKwB,UAAU,UAAf,0BACgB5B,EACd,qBAAK8B,IAAKC,EAAOC,IAAI,QAAQJ,UAAU,iBAEzC,sBAAKA,UAAU,UAAf,UACc,SAAXlB,EAAoB,cAAgB,GACzB,aAAXA,EAAwB,gBAAkB,MAE7C,qBAAKkB,UAAU,kBAAkBK,MAAO,CAACC,QAASxB,EAAS,OAAS,IAApE,SACGJ,EAAe,aAAe,mBAEjC,sBAAKsB,UAAU,kBAAf,UAAkC,iBAAkB1B,KACpD,sBAAK0B,UAAU,mBAAf,UACE,wBAAQA,UAAU,gBAAgBC,QAASb,EAA3C,eACA,wBAAQY,UAAU,gBAAgBC,QAASb,EAA3C,eACA,wBAAQY,UAAU,gBAAgBC,QAASb,EAA3C,qBAGJ,UC/FDmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.622a8879.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/match.c7730451.png\";","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport match from './images/match.png';\n\nexport const App = () => {\n\n  const [count, setCount] = useState(25);\n  const [playerCount, setPlayerCount] = useState(0);\n  const [computerCount, setComputerCount] = useState(0);\n  const [isPlayerTurn, setPlayerTurn] = useState(true);\n  const [isStarted, setisStarted] = useState(false);\n  const [whoWon, setWhoWon] = useState(null);\n  const countRef = useRef();\n  countRef.current = count;\n\n  useEffect(() => {\n    if (count === 0) {\n      if (playerCount % 2 === 0) {\n        setWhoWon('user');\n      } else {\n        setWhoWon('computer');\n      }\n    }\n  }, [count]);\n\n  const startGame = () => {\n    setisStarted(true);\n  }\n\n  const resetGame = () => {\n    setCount(25);\n    setWhoWon(null);\n    setPlayerCount(0);\n    setComputerCount(0);\n    setPlayerTurn(true);\n  }\n\n  const computerTurn = () => {\n    setTimeout(() => {\n      let randomNumber;\n      if (countRef.current === 1) {\n        randomNumber = 1;\n      } else if (countRef.current === 3) {\n        randomNumber = (computerCount + 1) % 2 === 0 ? 3 : 2;\n      } else if (countRef.current < 3) {\n        randomNumber = (computerCount + 1) % 2 === 0 ? 1 : 2;\n      } else {\n        randomNumber = Math.floor(Math.random() * 3) + 1;\n      }\n      setCount(prevState => {\n        return prevState - randomNumber;\n      });\n      setComputerCount(prevState => {\n        return prevState + randomNumber;\n      });\n      setPlayerTurn(true);\n      console.log(randomNumber);\n    }, 1000);\n  }\n\n  const playerTurn = (event) => {\n    const {innerText} = event.target;\n    if (count === 0 || !isPlayerTurn || count - +innerText < 0) return;\n    if (count - +innerText !== 0) {\n      setCount(count - +innerText);\n      setPlayerCount(playerCount + +innerText);\n      setPlayerTurn(false);\n      computerTurn();\n    } else {\n      setCount(count - +innerText);\n      setPlayerCount(playerCount + +innerText);\n      setPlayerTurn(false);\n    }\n  }\n\n  return (\n      <>\n        <div className=\"computer\"/>\n        <div className=\"board\">\n          {!isStarted\n              ? <div className=\"start_container\">\n                  <button className=\"start_button\" onClick={startGame}>Start</button>\n                </div>\n              : ''\n          }\n          {isStarted\n              ? <>\n                  <button className=\"reset_button\" onClick={resetGame}>Reset</button>\n                  <div className=\"players_counter\">{'Computer count: '}{computerCount}</div>\n                  <div className=\"counter\">\n                    Matches left:{count}\n                    <img src={match} alt=\"match\" className=\"match_img\"/>\n                  </div>\n                  <div className=\"who_won\">\n                    {whoWon === 'user' ? 'Player won!' : ''}\n                    {whoWon === 'computer' ? 'Computer won!' : ''}\n                  </div>\n                  <div className=\"players_counter\" style={{display: whoWon ? 'none' : ''}}>\n                    {isPlayerTurn ? 'Your turn!' : 'Computer turn!'}\n                  </div>\n                  <div className=\"players_counter\">{'Player count: '}{playerCount}</div>\n                  <div className=\"button_container\">\n                    <button className=\"player_button\" onClick={playerTurn}>1</button>\n                    <button className=\"player_button\" onClick={playerTurn}>2</button>\n                    <button className=\"player_button\" onClick={playerTurn}>3</button>\n                  </div>\n                </>\n              : ''}\n        </div>\n      </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}