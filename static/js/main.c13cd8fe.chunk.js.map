{"version":3,"sources":["components/start/Start.jsx","images/match.png","components/end/End.jsx","components/game/Game.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Start","startGame","type","className","onClick","End","isPlayerWon","Game","useState","playerCount","setPlayerCount","computerCount","setComputerCount","count","useMemo","isPlayerTurn","setPlayerTurn","setIsPlayerWon","countRef","useRef","current","resetGame","useCallback","computerTurn","setTimeout","chosenComputerNumber","prevState","playerTurn","event","value","target","useEffect","src","match","alt","style","display","App","isStarted","setIsStarted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c13cd8fe.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './start.css';\n\nexport const Start = ({ startGame }) => (\n  <button type=\"button\" className=\"start_button\" onClick={() => { startGame(); }}>Start</button>\n);\n\nStart.propTypes = {\n  startGame: PropTypes.func.isRequired,\n};\n","export default __webpack_public_path__ + \"static/media/match.c7730451.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const End = ({ isPlayerWon }) => (\n  <div>\n    { isPlayerWon ? 'Player won!' : ''}\n    { !isPlayerWon ? 'Computer won!' : ''}\n  </div>\n);\n\nEnd.propTypes = {\n  isPlayerWon: PropTypes.bool.isRequired,\n};\n","import React, {\n  useCallback, useEffect, useMemo, useRef, useState,\n} from 'react';\nimport match from '../../images/match.png';\nimport { End } from '../end/End';\nimport './game.css';\n\nconst startCount = 25;\n\nexport const Game = () => {\n  const [playerCount, setPlayerCount] = useState(0);\n  const [computerCount, setComputerCount] = useState(0);\n  const count = useMemo(() => startCount - playerCount - computerCount,\n    [playerCount, computerCount]);\n  const [isPlayerTurn, setPlayerTurn] = useState(true);\n  const [isPlayerWon, setIsPlayerWon] = useState(false);\n  const countRef = useRef();\n  countRef.current = count;\n\n  const resetGame = useCallback(\n    () => {\n      setIsPlayerWon(false);\n      setPlayerCount(0);\n      setComputerCount(0);\n      setPlayerTurn(true);\n    },\n    [],\n  );\n\n  const computerTurn = useCallback(\n    () => {\n      setTimeout(() => {\n        let chosenComputerNumber;\n        if (countRef.current === 1 || countRef.current === 2) {\n          chosenComputerNumber = 1;\n        }\n        if (countRef.current === 3) {\n          chosenComputerNumber = (computerCount + 1) % 2 === 0 ? 1 : 2;\n        }\n        if (countRef.current > 3) {\n          if ((countRef.current - 1) % 4 === 0 || (countRef.current - 1) % 4 === 1) {\n            chosenComputerNumber = 1;\n          } else if ((countRef.current - 3) % 4 === 0 || (countRef.current - 3) % 4 === 1) {\n            chosenComputerNumber = 3;\n          }\n\n          if (countRef.current - 3 === 3 && (computerCount + 3) % 2 !== 0) {\n            chosenComputerNumber = 3;\n          } else if (countRef.current - 2 === 3 && (computerCount + 2) % 2 !== 0) {\n            chosenComputerNumber = 2;\n          } else if (countRef.current - 1 === 3 && (computerCount + 1) % 2 !== 0) {\n            chosenComputerNumber = 1;\n          }\n        }\n\n        setComputerCount((prevState) => prevState + chosenComputerNumber);\n        setPlayerTurn(true);\n      }, 1000);\n    },\n    [],\n  );\n\n  const playerTurn = (event) => {\n    const { value } = event.target;\n    if (count === 0 || !isPlayerTurn || count - +value < 0) return;\n    if (count === 3 && +value === 3) return;\n    if (count === 2 && +value === 2) return;\n    if (count - +value !== 0) {\n      setPlayerCount(playerCount + +value);\n      setPlayerTurn(false);\n      computerTurn();\n    } else {\n      setPlayerCount(playerCount + +value);\n      setPlayerTurn(false);\n    }\n  };\n\n  useEffect(() => {\n    if (count === 0 && playerCount % 2 === 0) {\n      setIsPlayerWon(true);\n    }\n  }, [count, playerCount]);\n\n  return (\n    <>\n      <button type=\"button\" className=\"reset_button\" onClick={resetGame}>Reset</button>\n      <div className=\"players_counter\">\n        {'Computer count: '}\n        {computerCount}\n      </div>\n      <div className=\"counter\">\n        Matches left:\n        {count}\n        <img src={match} alt=\"match\" className=\"match_img\" />\n      </div>\n      {count === 0 ? (<End isPlayerWon={isPlayerWon} />) : ''}\n      <div className=\"players_counter\" style={{ display: count === 0 ? 'none' : '' }}>\n        {isPlayerTurn ? 'Your turn!' : 'Computer turn!'}\n      </div>\n      <div className=\"players_counter\">\n        {'Player count: '}\n        {playerCount}\n      </div>\n      <div className=\"button_container\">\n        <button\n          type=\"button\"\n          className=\"player_button\"\n          value={1}\n          onClick={playerTurn}\n        >\n          1\n        </button>\n        <button\n          type=\"button\"\n          className=\"player_button\"\n          value={2}\n          onClick={playerTurn}\n        >\n          2\n        </button>\n        <button\n          type=\"button\"\n          className=\"player_button\"\n          value={3}\n          onClick={playerTurn}\n        >\n          3\n        </button>\n      </div>\n    </>\n  );\n};\n","import React, {\n  useState, useCallback,\n} from 'react';\nimport './App.css';\nimport { Start } from './components/start/Start';\nimport { Game } from './components/game/Game';\n\nexport const App = () => {\n  const [isStarted, setIsStarted] = useState(false);\n\n  const startGame = useCallback(\n    () => {\n      setIsStarted(true);\n    },\n    [],\n  );\n\n  return (\n    <>\n      <div className=\"computer\" />\n      <div className=\"board\">\n        <div className=\"start_container\">\n          {!isStarted\n            ? <Start startGame={startGame} />\n            : ''}\n          {isStarted\n            ? (<Game />)\n            : ''}\n        </div>\n      </div>\n    </>\n  );\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}